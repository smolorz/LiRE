#! /bin/bash

#
# LIRE build script
# 2006-02-11 Joerg Langenberg (joerg.langenberg@gmx.net)
# 2012-08-03 Sebastian Smolorz (smolorz@rts.uni-hannover.de)
#	    : Copy toolchain's sys-root directory
# 2018-09-18 Sebastian Smolorz (sebastian.smolorz@still.de)
#	    : Install LiRE-toolchain.cmake
#

if [ ! -f .lire_config ]; then
    echo " ERROR: starting in invalid path or make [m|x|old]config first"
    exit 1
else
    . .lire_config
fi

# first of all -> create LIRE.config
. ${LiRE_DIR}/scripts/common/LIRE_CONFIG_FUNCTIONS

CREATE_LIRE_INSTALL_CONFIG
[ $? -gt 0 ] && { exit 1; }

# load LIRE.config
. "${LiRE_DIR}/configs/LIRE.config"

. $LIRE_CSCRDIR/LIRE_CONFIG_FUNCTIONS
. $LIRE_CSCRDIR/LIRE_CHECK_FUNCTIONS
. $LIRE_CSCRDIR/LIRE_LIST_FUNCTIONS
. $LIRE_CSCRDIR/LIRE_BUILD_FUNCTIONS

BUILD_ENABLED
if [ $? -eq 0 ]; then
    echo " No packages to build"
    exit 1
fi

#
# create build list
# -> dependencies have to be resolved by the Kconfig system
# -> creates list of all packages if it doesn't exist
#
CREATE_BUILD_LIST
[ $? -gt 0 ] && { exit 1; }

#
# check sources
#
CHECK_SRC
[ $? -gt 0 ] && { exit 1; }

#
# check all needed scripts for building
#
CHECK_NEEDED_BUILD_FILES
[ $? -gt 0 ] && { exit 1; }

#
# create dependency list
#
CREATE_SRC_DEPEND_LIST
[ $? -gt 0 ] && { exit 1; }

#
# create configs of all packages in dep list
#
CREATE_PACKAGE_CONFIGS
[ $? -gt 0 ] && { exit 1; }

#
# create LIRE_BUILDDIR
#
echo -n " Creating LIRE builddir ... "
mkdir -p "$LIRE_BUILDDIR"
[ $? -gt 0 ] && { echo "[FAILED]"; exit 1; }
echo "[OK]"

#
# create LIRE_INSTDIR
#
echo -n " Creating LIRE installdir ... "
mkdir -p "$LIRE_INSTDIR"
[ $? -gt 0 ] && { echo "[FAILED]"; exit 1; }
echo "[OK]"

#
# copy $LIRE_INSTDIR/sys-root from toolchain, create LIRE_HOSTDIR, set PYTHONPATH
# and install LiRE-toolchain.cmake
#
if [ "$CONFIG_LIRE_CROSS_COMPILE" == "y" ]; then
    echo -n " Copy toolchain's sys-root ... "
    cp -a "$CONFIG_LIRE_TOOLCHAIN_PARENT_DIR/$CONFIG_LIRE_TARGET_TUPLE/$CONFIG_LIRE_TARGET_TUPLE/sys-root" "$LIRE_INSTDIR"
    [ $? -gt 0 ] && { echo "[FAILED]"; exit 1; }
    echo "[OK]"

    echo -n " Creating LIRE hostdir ... "
    mkdir -p "$LIRE_HOSTDIR"
    [ $? -gt 0 ] && { echo "[FAILED]"; exit 1; }
    echo "[OK]"

    export PATH=${LIRE_HOSTDIR}/bin:$PATH
    export PYTHONPATH=${LIRE_HOSTDIR}/lib

    echo -n " Install LiRE-toolchain.cmake ... "
    cp -a "${LiRE_DIR}/configs/LiRE-toolchain.cmake" "$LIRE_INSTDIR"
    [ $? -gt 0 ] && { echo "[FAILED]"; exit 1; }
    echo "[OK]"

    echo "find_file(CMAKE_C_COMPILER ${host_alias}-gcc HINTS \${Build_LIRE_INSTALLDIR}/.. ENV HOME PATH_SUFFIXES ${host_alias}/bin NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)" >> $LIRE_INSTDIR/LiRE-toolchain.cmake
    echo "get_filename_component(LIRE_TOOLCHAIN_BIN_DIR \${CMAKE_C_COMPILER} DIRECTORY)" >> $LIRE_INSTDIR/LiRE-toolchain.cmake
    echo "set(CROSS_COMPILE \${LIRE_TOOLCHAIN_BIN_DIR}/${host_alias}-)" >> $LIRE_INSTDIR/LiRE-toolchain.cmake
fi

#
# remove old config logfile
#
if [ -e $CONFIG_LIRE_BUILD_CONFIGS_LOG ]; then
    rm $CONFIG_LIRE_BUILD_CONFIGS_LOG 
fi

#
# build check
#
for p in `cat $LIRE_SRC_DEP_LIST`; do
  CHECK_SCRIPT="$LIRE_SRCDIR/$p/$LIRE_SRC_CHECK_SKRIPT"
  bash $CHECK_SCRIPT
  [ $? -gt 0 ] && exit 1;
done

#
# build
#
for p in `cat $LIRE_SRC_DEP_LIST`; do
  BUILD_SCRIPT="$LIRE_SRCDIR/$p/$LIRE_SRC_BUILD_SKRIPT"
  bash $BUILD_SCRIPT
  [ $? -gt 0 ] && exit 1;
done

#
# delete $LIRE_INSTDIR/sys-root
#
if [ "$CONFIG_LIRE_CROSS_COMPILE" == "y" ]; then
    echo -n " Deleting formerly copied toolchain's sys-root ... "
    rm -fr "$LIRE_INSTDIR/sys-root"
fi

echo "Exit LIRE build"
echo ""

exit 0
